package sbnz

import java.util.List;
import java.util.ArrayList;
import sbnz.web.dto.RecipeFilterDto;
import sbnz.model.drools.PrioritizedRecipe;
import sbnz.model.drools.PrioritizedRecipes;
import sbnz.service.RecipeService;
import sbnz.model.Recipe;
import sbnz.model.IngredientQuantity;


rule "Filter by allergens"
	agenda-group "recipes-filters"
	no-loop
	lock-on-active
	when
        $recipeFilter: RecipeFilterDto( $allergens:allergens, allergens != null )
        $prioritizedRecipes: List()
		$items : List() from accumulate ( $prioritizedRecipe : PrioritizedRecipe ($ingredients: recipe.ingredients) from $prioritizedRecipes,
			init( List<PrioritizedRecipe> deleteRecipes = new ArrayList(); ),
			action(  for (Object ingQuantity : $ingredients){
						if ( $allergens.contains( ((IngredientQuantity) ingQuantity).getIngredient().getName()) ){
							deleteRecipes.add($prioritizedRecipe);
						}
					}
			 ),
			result ( deleteRecipes )
			)
	then 
		modify ( $prioritizedRecipes ) { removeAll($items); }

end

rule "Filter by kitchen type"
	agenda-group "recipes-filters"
	no-loop
	lock-on-active
	when
		$recipeFilter: RecipeFilterDto($kitchenType: kitchenType, kitchenType != null)
		$prioritizedRecipes: List()
		$items : List () from collect( PrioritizedRecipe( recipe.kitchenType.toString() != $kitchenType) from $prioritizedRecipes)
	then 
		modify ( $prioritizedRecipes ) { removeAll($items); }
end

rule "Filter by meal type"
	agenda-group "recipes-filters"
	no-loop
	lock-on-active
	when
		$recipeFilter: RecipeFilterDto($mealType: mealType, mealType != null)
		$prioritizedRecipes: List()
		$items : List () from collect( PrioritizedRecipe(recipe.mealType.toString() != $mealType) from $prioritizedRecipes)
	then 
		modify ( $prioritizedRecipes ) { removeAll($items); }
end

rule "Filter by calories"
	agenda-group "recipes-filters"
	no-loop
	lock-on-active
	when
		$recipeFilter: RecipeFilterDto($fromKcal: fromKcal, $toKcal: toKcal, fromKcal != null, toKcal != null )
		$prioritizedRecipes: List()
		$items : List () from collect( PrioritizedRecipe(recipe.calories < $fromKcal || recipe.calories > $toKcal) from $prioritizedRecipes)
	then 
		modify ( $prioritizedRecipes ) { removeAll($items); }
end

rule "Filter by preparation time"
	agenda-group "recipes-filters"
	no-loop
	lock-on-active
	when
		$recipeFilter: RecipeFilterDto($fromMins: fromMins, $toMins: toMins, fromMins != null, toMins != null)
		$prioritizedRecipes: List()
		$items : List () from collect( PrioritizedRecipe(recipe.preparationTime < $fromMins || recipe.preparationTime > $toMins) from $prioritizedRecipes)
	then 
		modify ( $prioritizedRecipes ) { removeAll($items); }
end

rule "Filter by number of people"
	agenda-group "recipes-filters"
	no-loop
	lock-on-active
	when
		$recipeFilter: RecipeFilterDto($fromPpl: fromPpl, $toPpl: toPpl, fromPpl != null, toPpl != null )
		$prioritizedRecipes: List()
		$items : List () from collect( PrioritizedRecipe($noOfPeople: recipe.noOfPeople, $noOfPeople < $fromPpl || $noOfPeople > $toPpl) from $prioritizedRecipes)
	then 
		modify ( $prioritizedRecipes ) { removeAll($items); }
end
