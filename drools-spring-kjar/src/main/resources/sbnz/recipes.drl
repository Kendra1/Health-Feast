package sbnz

import java.util.List;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import java.util.ArrayList;
import sbnz.web.dto.RecipeFilterDto;
import sbnz.model.drools.PrioritizedRecipe;
import sbnz.model.drools.PrioritizedRecipes;
import sbnz.service.RecipeService;
import sbnz.model.Recipe;
import sbnz.model.IngredientQuantity;

rule "Sort recipes by priority"
	agenda-group "recipes"
	no-loop
	when
    	$prioritizedRecipe: PrioritizedRecipe( $recipe: recipe, $priority: priority )
  		$prioritizedRecipes: PrioritizedRecipes( $recipes: recipes not contains $prioritizedRecipe )
    	not PrioritizedRecipe( this != $prioritizedRecipe, this not memberOf $recipes, priority < $priority )
	then
    	$prioritizedRecipes.getRecipes().add( $prioritizedRecipe );
    	update ( $prioritizedRecipes );
end

rule "Find recipe and priority"
	agenda-group "recipes"
	no-loop
	when
		$prioritizedRecipes: List()
		$allRecipes: List(size > 0)
		$recipeFilter: RecipeFilterDto($ingredients : ingredients)
		$value : List() from accumulate ( $recipe: Recipe($recipeIngredients : ingredients) from $allRecipes,
			init( List<PrioritizedRecipe> pRecipes = new ArrayList(); ),
			action(
				int count = 0;
				for (Object ing: $recipeIngredients) {
					
					boolean containsIngredient = $ingredients.contains(((IngredientQuantity)ing).getIngredient().getName());
					
					if (containsIngredient && ((IngredientQuantity) ing).isSpecificIngredient()) {
						count = -1;
						break;
					} 
					//check how many entered ingredients does recipe have 
					else if (containsIngredient){
						count += 1;	
					}
				}
				
				//if recipe is specific, then priority is -1
				int priority = count == -1 ? count : $recipeIngredients.size() / count;
				PrioritizedRecipe prioritizedRecipe = new PrioritizedRecipe($recipe, priority);
				pRecipes.add(prioritizedRecipe);
				),
			result(pRecipes))
	then
		$prioritizedRecipes.addAll($value);
		update ($prioritizedRecipes);
end

rule "Find recipes by name"
	agenda-group "recipes"
	no-loop
	when
		$recipeName: String()
		$recipes: List(size > 0)
		$foundRecipes: List()
        $items : List () from collect( Recipe( name contains $recipeName  ) from $recipes)
	then
		$foundRecipes.addAll($items);
		update($foundRecipes);
end

rule "Find warnings of ingredients for selected recipe"
	agenda-group "recipes"
	no-loop
	when
		$ingredientWarning : Map()
		$recipe: Recipe($recipeIngredients : ingredients) 
		$warnings: Map() from accumulate ( IngredientQuantity($ingredient: ingredient, ingredient.warning != null) from $recipeIngredients,
			init(Map<String, String> ingredientWithWarning = new HashMap();),
			action(ingredientWithWarning.put($ingredient.getName(), $ingredient.getWarning());),
			result(ingredientWithWarning)
		)
	then
		$ingredientWarning.putAll($warnings);
		insert($ingredientWarning);
end

rule "Find recommended recipes"
	agenda-group "recipes"
	no-loop
	when
		$recipe: Recipe($recommendedRecipes: recommendedRecipes, recommendedRecipes.size() > 0)
		$recipes: List()
        $foundRecipes : List () from collect( Recipe() from $recommendedRecipes)
	then
		$recipes.addAll($foundRecipes);
		update($recipes);
end
